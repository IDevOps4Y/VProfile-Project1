--------------------------------------------------------------------------------------------
||||||||||||||||||||||||||||| Docker Compose |||||||||||||||||||||||||||||||||||||||||||||||
--------------------------------------------------------------------------------------------
--
--->Docker compose is a tool to run multicontainers together, like our Vprofile project 
--->we know our project containers neet to talk to each other. like we had multiple VMs or 
    multiple EC, two instances or multiple AWS services that talk to each other in the same - 
    network.
--->like this, if we have multiple containers, then we need a tool which can run them together - 
    and we can manage it centrally.
--->and Docker Compose does that very well.
--->Docker Compose, you have a YAML file where, you mentioned all the container information and you - 
    said "Docker-compose up" just like "vagrant up".
--->yes, we can compare Docker Compose with Vagrant, what Vagrant is for VMs, same way Docker Compose - 
    is for containers.
--
`'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'`
docker-compose.yml
`'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'`version: "3.9"  # optional since v1.27.0
services:
  web:
    build: .
    ports:
      - "8000:5000"
    volumes:
      - .:/code
      - logvolume01:/var/log
    depends_on:
      - redis
  redis:
    image: redis
volumes:
  logvolume01: {}

`'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'`--
--->this is one example above.
--->this is the YAML file.
--->if you quickly go through, it's pretty simple to understand.
	->version: ==> we have a version here,
	->services: ==> we have services here, which means containers.
			==> so, we have two containers in this docker-compose.yml file
		->web: ==> container with name "web"
			->build: . ==> web container using an option of "build" and ther is a path - 
					   dot(.) in current working directory.
				     ==> so this is expecting a docker file in the same diretory where - 
					   you have the "docker-compose.yml" file.
				     ==> so "docker-compose.yml" file and "Dockerfile" for the "web" - 
					   container should be in the current working directory.
				     ==> so, "build" instruction will build an image from the docker file.
				->port:
					->"8000:5000" ==> and it will run the container with the name "web" - 
								and it's going to mapt the port "8000" with port "5000" - 
								of the container.
				->volumes: ==> and there is a volume option here and it has two volumes      
					->.:/code ==> the first one is the bind mount dot (.) is the host directory.
						    ==> that means the current working directory will be mapped with the container
					->logvolume01:/var/log ==> the volume "logvolume01" which is created at the from the "volumes" section has been used.	   
		->redis: ==> another container with name "redis"
			->image: redis ==> Redis container consists of an image called "redis"
					   ==> from the image "redis" with the name "redis"
	->volumes: ==> here we have volumes section,
		->logvolume01: ==> you create a volume with name "logvolume01", 
				   ==> which creates a volume.
				   ==> and this volume is mapped above in "volumes" instruction of the "web" service
--

`'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'`
install docker-compose: https://docs.docker.com/compose/install/linux/#install-using-the-repository

`'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'`
--
docker-compose --help ==> it will give all options that can be used with this utility.
--
---> so, let's go to getting started guide, and follow step by step.
--
`'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'`
docker-compose example: https://docs.docker.com/compose/gettingstarted/

`'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'`
--
:::::::::::::::::: Step 1: Define the application dependencies :::::::::::::::::::::::::::

1. Create a directory for the project:
	->mkdir composetest ==> make project directory.
 	->cd composetest ==> get into the project directory.
2. Create a file called app.py in your project directory and paste the following code in:
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	import time

	import redis
	from flask import Flask

	app = Flask(__name__)
	cache = redis.Redis(host='redis', port=6379)

	def get_hit_count():
    		retries = 5
    		while True:
        		try:
            		return cache.incr('hits')
        		except redis.exceptions.ConnectionError as exc:
            		if retries == 0:
                			raise exc
            		retries -= 1
            		time.sleep(0.5)

	@app.route('/')
	def hello():
    		count = get_hit_count()
    		return 'Hello World! I have been seen {} times.\n'.format(count)
 	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	==> In this example, redis is the hostname of the redis container on the application’s network. 
	==>We use the default port for Redis, 6379.
3. Create another file called requirements.txt in your project directory and paste the 
   following code in:
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	flask
	redis
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	==> so, these are basically the dependencies, 
	==> the python application dependencies. while, 
	==> we build it, it's going to install these dependencies.
--
::::::::::::::::::::: Step 2: Create a Dockerfile :::::::::::::::::::::::::::::::::::::::::
--
--->The Dockerfile is used to build a Docker image. 
--->The image contains all the dependencies the Python application requires, including Python itself.
1. In your project directory, create a file named "Dockerfile" and paste the following code in:
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	# syntax=docker/dockerfile:1
	FROM python:3.7-alpine
	WORKDIR /code
	ENV FLASK_APP=app.py
	ENV FLASK_RUN_HOST=0.0.0.0
	RUN apk add --no-cache gcc musl-dev linux-headers
	COPY requirements.txt requirements.txt
	RUN pip install -r requirements.txt
	EXPOSE 5000
	COPY . .
	CMD ["flask", "run"]
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	==> This tells Docker to:

		==> Build an image starting with the Python 3.7 image.
		==> Set the working directory to /code.
		==> Set environment variables used by the flask command.
		==> Install gcc and other dependencies
		==> Copy requirements.txt and install the Python dependencies.
		==> Add metadata to the image to describe that the container is listening on port 5000
		==> Copy the current directory . in the project to the workdir . in the image.
		==> Set the default command for the container to flask run.
--
::::::::::::::::::::: Step 3: Define services in a Compose file :::::::::::::::::::::::::::
--
1. Create a file called "docker-compose.yml" in your project directory and paste the following:
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	version: "3.9"
	services:
  		web:
    			build: .
    			ports:
      		  - "8000:5000"
  		redis:
    			image: "redis:alpine"
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	==> This Compose file defines two services: web and redis.
	==> The web service uses an image that’s built from the Dockerfile in the current directory. 
		==> It then binds the container and the host machine to the exposed port, 8000. This example service uses the default port for the Flask web server, 5000.
	==> The redis service uses a public Redis image pulled from the Docker Hub registry.
--
::::::::::::::::::::: Step 4: Build and run your app with Compose :::::::::::::::::::::::::::
--
1. From your project directory, start up your application by running "docker-compose up".
	---> response from the above the command
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	docker compose up

	Creating network "composetest_default" with the default driver
	Creating composetest_web_1 ...
	Creating composetest_redis_1 ...
	Creating composetest_web_1
	Creating composetest_redis_1 ... done
	Attaching to composetest_web_1, composetest_redis_1
	web_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
	redis_1  | 1:C 17 Aug 22:11:10.480 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
	redis_1  | 1:C 17 Aug 22:11:10.480 # Redis version=4.0.1, bits=64, commit=00000000, modified=0, pid=1, just started
	redis_1  | 1:C 17 Aug 22:11:10.480 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
	web_1    |  * Restarting with stat
	redis_1  | 1:M 17 Aug 22:11:10.483 * Running mode=standalone, port=6379.
	redis_1  | 1:M 17 Aug 22:11:10.483 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
	web_1    |  * Debugger is active!
	redis_1  | 1:M 17 Aug 22:11:10.483 # Server initialized
	redis_1  | 1:M 17 Aug 22:11:10.483 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
	web_1    |  * Debugger PIN: 330-787-903
	redis_1  | 1:M 17 Aug 22:11:10.483 * Ready to accept connections
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	==> ompose pulls a Redis image, builds an image for your code, and starts the services you defined. 
	==> In this case, the code is statically copied into the image at build time.
2. Enter http://localhost:8000/ in a browser to see the application running.
	==> if this doesn’t resolve, you can also try http://127.0.0.1:8000.
	==> You should see a message in your browser saying:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Hello World! I have been seen 1 times.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3. Refresh the page.
	==> The number should increment.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Hello World! I have been seen 2 times.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4. Switch to another terminal window, and type "docker image ls" to list local images.
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	docker image ls

	REPOSITORY        TAG           IMAGE ID      CREATED        SIZE
	composetest_web   latest        e2c21aa48cc1  4 minutes ago  93.8MB
	python            3.4-alpine    84e6077c7ab6  7 days ago     82.5MB
	redis             alpine        9d8fa9aa0e5b  3 weeks ago    27.5MB
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	==> Listing images at this point should return "redis" and "web".
	==> You can inspect images with "docker inspect <tag or id>".
5. Stop the application, either by running "docker compose down" from within your project directory in the second terminal, 
   or by hitting CTRL+C in the original terminal where you started the app.	
--
::::::::::::::::::::: Step 5: Edit the Compose file to add a bind mount :::::::::::::::::::::::::::
--
1. Edit docker-compose.yml in your project directory to add a bind mount for the web service:
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	version: "3.9"
	services:
  		web:
    			build: .
    			ports:
      			- "8000:5000"
    			volumes:
      			- .:/code
    			environment:
      			FLASK_DEBUG: True
  		redis:
    			image: "redis:alpine"
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	==> The new volumes key mounts the project directory (current directory) on the host to /code inside the container, 
	==> allowing you to modify the code on the fly, without having to rebuild the image. The environment key sets the FLASK_ENV environment variable, 
	==> which tells flask run to run in development mode and reload the code on change. This mode should only be used in development.
--
::::::::::::::::::::: Step 6: Re-build and run the app with Compose :::::::::::::::::::::::::::
--
From your project directory, type docker compose up to build the app with the updated Compose file, and run it.
--
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	docker compose up

	Creating network "composetest_default" with the default driver
	Creating composetest_web_1 ...
	Creating composetest_redis_1 ...
	Creating composetest_web_1
	Creating composetest_redis_1 ... done
	Attaching to composetest_web_1, composetest_redis_1
	web_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
	...
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	==> Check the Hello World message in a web browser again, and refresh to see the count increment.
--
::::::::::::::::::::::::::: Step 7: Update the application :::::::::::::::::::::::::::::::
--
1. Because the application code is now mounted into the container using a volume, you can make changes to its code and see the changes instantly, 
    without having to rebuild the image.
2. Change the greeting in app.py and save it. 
   For example, change the Hello World! message to Hello from Docker!:
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	return 'Hello from Docker! I have been seen {} times.\n'.format(count)
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	==> return 'Hello from Docker! I have been seen {} times.\n'.format(count)
--
`'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'`
--
::::::::::::::::::::::::: Step 8: Experiment with some other commands ::::::::::::::::::::
--
1. you want to run your services in the background, you can pass the -d flag (for “detached” mode) to docker compose up and use docker compose ps to see what is currently running:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker compose up -d

Starting composetest_redis_1...
Starting composetest_web_1...
docker compose ps

       Name                      Command               State           Ports         
-------------------------------------------------------------------------------------
composetest_redis_1   docker-entrypoint.sh redis ...   Up      6379/tcp              
composetest_web_1     flask run                        Up      0.0.0.0:8000->5000/tcp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2. The docker compose run command allows you to run one-off commands for your services. For example, to see what environment variables are available to the web service:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker compose run web env
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3. If you started Compose with docker compose up -d, stop your services once you’ve finished with them:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker compose stop
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4. You can bring everything down, removing the containers entirely, with the down command. Pass --volumes to also remove the data volume used by the Redis container:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker compose down --volumes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
`'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'``'`'`'`'`'`'`'`

